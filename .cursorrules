# Development Guidelines for Reel AI

## Frontend Development

### Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported component, subcomponents, helpers, static content, types

### Naming Conventions
- Components should go in src/components and be named like new-component.tsx
- Use lowercase with dashes for directories (e.g., components/video-editor)
- Favor named exports for components

### TypeScript Usage
- Use TypeScript for all frontend code; prefer interfaces over types
- Avoid enums; use const maps instead
- Use functional components with TypeScript interfaces
- Ensure proper typing for Tauri IPC calls and events

### UI and Styling
- Use Shadcn UI and Tailwind for components and styling
- Implement responsive design with Tailwind CSS; use a mobile-first approach
- Use Framer Motion for animations, keeping performance in mind

### Performance Optimization
- Optimize asset loading and bundling for Tauri's static file serving
- Use dynamic imports for heavy components
- Implement proper loading states for async operations
- Optimize video processing operations to run in background threads

### Data Querying
- Use React Query (TanStack Query) for all data fetching and mutations
- Implement proper query keys following the collection/entity/parameters pattern
- Enable automatic background refetching with appropriate staleTime
- Use optimistic updates for mutations when possible
- Implement proper error handling and retry logic
- Structure query hooks in dedicated files under features/queries

## Rust Development

### Code Organization
- Place Rust code in src-tauri/src
- Organize code into modules based on functionality
- Use lib.rs for shared code between desktop and mobile
- Separate implementations into desktop.rs and mobile.rs

### Rust Best Practices
- Follow Rust 2021 edition idioms
- Use proper error handling with custom Error types
- Implement proper logging using tracing
- Use async/await for I/O operations
- Prefer owned types over references when appropriate
- Use proper lifetime annotations when necessary

### Tauri v2 Guidelines
- Use Tauri's plugin system for extensible features
- Implement proper permission handling for commands
- Use channels for streaming data between Rust and JS
- Properly handle window management and lifecycle events
- Follow mobile-specific guidelines for Android/iOS support

### Video Processing
- Implement video processing in Rust using FFmpeg bindings
- Use proper error handling for media operations
- Implement progress reporting through Tauri events
- Optimize for different platforms' video codecs
- Use background threads for heavy processing

## Project Structure

```
project-root/
├── src/ # Frontend code
│ ├── components/ # Reusable UI components
│ │ ├── ui/ # Basic UI components
│ │ ├── video/ # Video-related components
│ │ └── editor/ # Editor components
│ ├── lib/ # Shared utilities
│ └── types/ # TypeScript types
├── src-tauri/ # Rust backend code
│ ├── src/
│ │ ├── lib.rs # Shared code
│ │ ├── desktop.rs # Desktop-specific code
│ │ ├── mobile.rs # Mobile-specific code
│ │ ├── commands.rs # Tauri commands
│ │ └── video/ # Video processing modules
│ ├── Cargo.toml
│ └── tauri.conf.json
└── package.json
```

### Component Organization
Within the /src/components folder, organize components by feature:

```
/src/components
├── /ui                    # Basic UI components
│   ├── /button
│   ├── /modal
│   └── /card
├── /video                 # Video-related components
│   ├── /player
│   ├── /timeline
│   └── /controls
└── /editor               # Editor components
    ├── /tools
    ├── /effects
    └── /export
```

### State Management
- Use Zustand for global state management
- Implement proper state persistence with Tauri's fs API
- Handle IPC state synchronization properly

### Error Handling
- Implement proper error boundaries in React
- Use custom error types in Rust
- Proper error propagation between Rust and JS